#!/usr/bin/env python
'''
Fade.
'''
import argparse
import numpy as np
import scipy.interpolate as interp
import time

import opc

# Default configs for this host
DEFAULT_CLIENT = 'desk'
DEFAULT_CONFIG = 'desk'
DEFAULT_PORT = 7890

VALID_CONFIGS = {
    'desk': {
        'num_strips': 4,
        'strip_lengths': tuple([60] * 4),
    },
    'printrbot': {
        'num_strips': 3,
        'strip_lengths': (27, 22, 60),
    },
    'default': {
        'num_strips': 8,
        'strip_lengths': tuple([64] * 8),
    }
}


def num_leds(config):
    return sum(config['strip_lengths'])


def strip_lengths(config):
    return config['strip_lengths']


def black(config):
    return [(0, 0, 0)] * num_leds(config)


def white(config):
    return [(255, 255, 255)] * num_leds(config)


def empty_channel(config):
    return np.array([0] * num_leds(config))


VALID_CMDS = [
    'off',
    'on',
    'test',
    'rainbow',
    'print',
]


def design_test(client, config):
    '''
    Main design test, show all the functions sequentially.
    '''
    off(client, config)
    time.sleep(1)
    on(client, config)
    time.sleep(1)
    print3d(client, config, 10)
    time.sleep(1)
    rainbow(client, config, 10)
    time.sleep(1)


# Visual utilities
##################
def off(client, config):
    print("off")
    client.put_pixels(black(config))


def on(client, config):
    print("on")
    client.put_pixels(black(config))
    client.put_pixels(black(config))
    time.sleep(0.5)
    client.put_pixels(white(config))


def cycle(client, config, framerate, buffer):
    index = 0
    while True:
        buf = buffer[index:] + buffer[:index]
        client.put_pixels(buf)
        time.sleep(framerate)
        index += 1
        if index % num_leds(config) == 0:
            index = 0


def rainbow(client, config, timeout=None):
    print("rainbow")
    WHEEL = [
        (255, 0, 0),
        (255, 127, 0),
        (255, 255, 0),
        (0, 255, 0),
        (0, 0, 255),
        (75, 0, 130),
        (148, 0, 211),
        (255, 0, 0),
        ]
    buf = resize(WHEEL, empty_channel(config).size)
    cycle(client, config, 0.6, buf)


def print3d(client, config, timeout=None):
    print("print3d")
    PRINT_LIGHT_ON = [(255, 255, 255)] * strip_lengths(config)[1]

    FRAMERATE = 1.2
    WHEEL = [
        (255, 72, 196),
        (43, 209, 252),
        (243, 234, 95),
        (192, 77, 249),
        (255, 63, 63),
        ]
    buf = resize(WHEEL, empty_channel(config).size)
    index = 0
    while True:
        buf = buf[index:] + buf[:index]
        out = buf[0:strip_lengths(config)[0]] + PRINT_LIGHT_ON
        client.put_pixels(out)
        time.sleep(FRAMERATE)
        index += 1
        if index % num_leds(config) == 0:
            index = 0


# Utilities
###########
def resize(in_pattern, out_size):
    rs = np.array([x for (x, y, z) in in_pattern])
    gs = np.array([y for (x, y, z) in in_pattern])
    bs = np.array([z for (x, y, z) in in_pattern])
    r_interp = interp.interp1d(np.arange(rs.size), rs)
    r_stretch = r_interp(np.linspace(0, rs.size-1, out_size))
    g_interp = interp.interp1d(np.arange(gs.size), gs)
    g_stretch = g_interp(np.linspace(0, gs.size-1, out_size))
    b_interp = interp.interp1d(np.arange(bs.size), bs)
    b_stretch = b_interp(np.linspace(0, bs.size-1, out_size))
    rgb = np.array([
        r_stretch.astype(int),
        g_stretch.astype(int),
        b_stretch.astype(int)])
    buf = rgb.T
    buf = [list(s) for s in buf]
    return list(buf)


def get_client(server_addr, port):
    return opc.Client('{}:{}'.format(server_addr, port))


def get_args():
    parser = argparse.ArgumentParser(description='fadecanvas helper utility')
    # Configuration
    parser.add_argument('-c', type=str, default=DEFAULT_CLIENT,
                        help='client to connect to for fcserver')
    parser.add_argument('--port', type=int, default=DEFAULT_PORT,
                        help='port to connect to for fcserver')
    # Utilities
    parser.add_argument('cmds', nargs=argparse.REMAINDER)
    return parser.parse_args()


def parse_cmd(cmd, client, config):
    if cmd == "off":
        off(client, config)
    elif cmd == "on":
        on(client, config)
    elif cmd == "test":
        design_test(client, config)
    elif cmd == "rainbow":
        rainbow(client, config)
    elif cmd == "print":
        print3d(client, config)
    else:
        print("Unknown command: {}".format(cmd))
        print("Valid commands: {}".format(VALID_CMDS))


def get_config(client):
    client_name = DEFAULT_CONFIG
    if client in VALID_CONFIGS:
        print("config is {}".format(client))
        client_name = client
    else:
        print("using default config")
    return VALID_CONFIGS[client_name]


# Application entry
###################
def main(args):
    # num_strips = args.strips
    # num_leds = args.num_leds
    # print("{} strips, {} LEDs".format(num_strips, num_leds))
    try:
        if args.c == 'localhost':
            client_host = args.c
        elif not args.c.endswith('.local'):
            client_host = args.c + '.local'
        client = get_client(client_host, args.port)
        config = get_config(args.c)
        print("fade => {} @ {}".format(client_host, args.port))
        for cmd in args.cmds:
            parse_cmd(cmd, client, config)
            time.sleep(1)
    except KeyboardInterrupt:
        off(client, config)


if __name__ == "__main__":
    main(get_args())
